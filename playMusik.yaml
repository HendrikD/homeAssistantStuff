# plays shuffled music on the media player {{player}} (configure it in this file)

# when called it expects two arguments:
# source: on which device to play the music (as displayed in spotify)
# playlist: which spotify playlist to play. (copy the public playlist link on spotify)

# the script takes all necessary steps to ensure that the playlist is successfully played on the device.
# don't usse it to switch songs/playlists as it pauses the running music, sets all necessary settings and only then starts the music. 
# This is good when you want to initiate new playback but is unnecessary when you just want to switch songs/playlists
# 
# Use this when you expect that you have to switch the source (it will still work if you dont though)

alias: Play Music
variables:
  player: 'media_player.spotify_grovion'
  volume: 0.5
  shuffle: true
sequence:
  - if:
      - condition: not
        conditions:
          - condition: template
            value_template: >-
              {{ source == state_attr(player, 'source')
              }}
        alias: Zielsource != Current Source
    then:
      - service: media_player.select_source
        data:
          source: "{{source}}"
        target:
          entity_id: "{{player}}"
      - wait_for_trigger:
          - platform: template
            value_template: >-
              {{ source == state_attr(player, 'source')
              }}
        continue_on_timeout: false
    else: []
  - if:
      - condition: state
        entity_id: "{{player}}"
        state: playing
    then:
      - service: media_player.media_pause
        target:
          entity_id: "{{player}}"
        data: {}
  - service: media_player.volume_set
    data:
      volume_level: "{{volume}}"
    target:
      entity_id: "{{player}}"
  - if:
      - condition: template
        value_template: "{{shuffle}}"
      then:
        - service: media_player.shuffle_set
          data:
            shuffle: true
          target:
            entity_id: "{{player}}"
        - wait_template: "{{ state_attr(player, 'shuffle') }}"
          continue_on_timeout: true
          timeout: "10"
  - service: media_player.play_media
    target:
      entity_id: "{{player}}"
    data:
      media_content_id: "{{playlist}}"
      media_content_type: playlist
mode: single
